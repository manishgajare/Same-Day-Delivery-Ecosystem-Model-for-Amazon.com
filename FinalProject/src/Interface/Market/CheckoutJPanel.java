/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.Market;

import Business.Customer.Customer;
import Business.Customer.CustomerAccount;
import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Enterprise.Amazon;
import Business.Enterprise.Enterprise;
import Business.Network.CountryNetwork;
import Business.Network.RegionNetwork;
import Business.Network.StateNetwork;
import Business.Organization.Amazon.Finance.AmazonFinanceOrganization;
import Business.Organization.Amazon.Finance.Invoice;
import Business.Organization.Amazon.Finance.Payment;
import Business.Organization.Amazon.Inventory.AmazonInventoryOrganization;
import Business.Organization.Amazon.Sales.AmazonSalesOrganization;
import Business.Organization.Amazon.Sales.Order;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Interface.MainJFrame;
import java.awt.CardLayout;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Manish Gajare
 */
public class CheckoutJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CheckoutJPanel
     */
    
    JPanel userProcessContainer;
    EcoSystem system;
    DB4OUtil db4OUtil;
    Order order;
    String mainAddress;
    
    
    public CheckoutJPanel(JPanel userProcessContainer, EcoSystem system, DB4OUtil db4OUtil,Order order,String mainAddress) {
        initComponents();
    
    this.userProcessContainer = userProcessContainer;
    this.system = system;
    this.db4OUtil = db4OUtil;
    this.order = order;
    this.mainAddress = mainAddress;
    
    populateCountryJComboBox();
    
    }
    
    
    private void populateCountryJComboBox() {

        ArrayList<CountryNetwork> countryNetworkList = system.getCountryNetworkList();

        countryJComboBox.removeAllItems();


        for (int i = 0; countryNetworkList.size() > i; i++) {
            countryJComboBox.addItem(countryNetworkList.get(i));
        }

    }

    private void populateStateJComboBox(CountryNetwork country) {

        stateJComboBox.removeAllItems();
        ArrayList<StateNetwork> stateNetworkList = country.getStateNetworkList();


        for (int i = 0; stateNetworkList.size() > i; i++) {
            stateJComboBox.addItem(stateNetworkList.get(i));
        }

    }

    private void populateRegionJComboBox(StateNetwork state) {

        regionJComboBox.removeAllItems();
        ArrayList<RegionNetwork> regionNetworkList = state.getRegionNetworkList();

        for (int i = 0; regionNetworkList.size() > i; i++) {
            regionJComboBox.addItem(regionNetworkList.get(i));
        }

    }

    
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        loginJButton = new javax.swing.JButton();
        usernameJTextField = new javax.swing.JTextField();
        usernameJLabel = new javax.swing.JLabel();
        passwordJPasswordField = new javax.swing.JPasswordField();
        passwordJLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        nameJTextField = new javax.swing.JTextField();
        usernameJTextField1 = new javax.swing.JTextField();
        passwordJTextField = new javax.swing.JTextField();
        countryJComboBox = new javax.swing.JComboBox();
        stateJComboBox = new javax.swing.JComboBox();
        regionJComboBox = new javax.swing.JComboBox();
        signUpJButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        phoneNoJTextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        emailIdJTextField = new javax.swing.JTextField();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("New User?");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 70, 93, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Existing User?");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 119, -1));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 90, -1, 396));

        loginJButton.setText("Login");
        loginJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginJButtonActionPerformed(evt);
            }
        });
        add(loginJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 250, 84, -1));

        usernameJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                usernameJTextFieldKeyTyped(evt);
            }
        });
        add(usernameJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 160, 109, -1));

        usernameJLabel.setText("Username");
        add(usernameJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 170, -1, -1));

        passwordJPasswordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                passwordJPasswordFieldKeyTyped(evt);
            }
        });
        add(passwordJPasswordField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 200, 109, -1));

        passwordJLabel.setText("Password");
        add(passwordJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 200, -1, -1));

        jLabel4.setText("Country :");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 310, -1, -1));

        jLabel5.setText("State :");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 340, -1, -1));

        jLabel6.setText("Region :");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 380, -1, -1));

        jLabel7.setText("Name :");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 120, -1, -1));

        jLabel8.setText("Username :");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 240, -1, -1));

        jLabel9.setText("Password :");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 270, -1, -1));

        nameJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nameJTextFieldKeyTyped(evt);
            }
        });
        add(nameJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 120, 125, -1));

        usernameJTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                usernameJTextField1KeyTyped(evt);
            }
        });
        add(usernameJTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 240, 126, -1));

        passwordJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                passwordJTextFieldKeyTyped(evt);
            }
        });
        add(passwordJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 270, 126, -1));

        countryJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countryJComboBoxActionPerformed(evt);
            }
        });
        add(countryJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 310, 129, -1));

        stateJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stateJComboBoxActionPerformed(evt);
            }
        });
        add(stateJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 340, 129, -1));

        add(regionJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 380, 129, -1));

        signUpJButton.setText("Sign Up");
        signUpJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signUpJButtonActionPerformed(evt);
            }
        });
        add(signUpJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 430, -1, -1));

        jLabel10.setText("Phone No. :");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 160, -1, -1));

        phoneNoJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                phoneNoJTextFieldKeyTyped(evt);
            }
        });
        add(phoneNoJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 160, 125, -1));

        jLabel11.setText("Email ID :");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 200, -1, -1));

        emailIdJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                emailIdJTextFieldKeyTyped(evt);
            }
        });
        add(emailIdJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 200, 126, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void loginJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginJButtonActionPerformed

        
                          // Get user name
        String userName = usernameJTextField.getText();
        // Get Password
        char[] passwordCharArray = passwordJPasswordField.getPassword();
        String password = String.valueOf(passwordCharArray);
        
        
                     int count = 0;
   
    if( password.isEmpty() || userName.isEmpty() ){ 
     count++;
       }
        
       if(count==0){

        
        
       

        CustomerAccount customerAccount=null;
        Amazon amazon = null;
        int check = 0;
        
            for (CountryNetwork countryNetwork : system.getCountryNetworkList()) {
               for (StateNetwork stateNetwork : countryNetwork.getStateNetworkList()) {
                   

                    for (RegionNetwork regionNetwork : stateNetwork.getRegionNetworkList()) {
                       

                        for (Enterprise enterprise : regionNetwork.getEnterpriseDirectory().getEnterpriseList()) {
                            

                            if(enterprise instanceof Amazon){
                                amazon = (Amazon)enterprise;
                                if(amazon.getCustomerAccountDirectory().authenticateCustomer(userName, password)!=null){

                                    customerAccount = amazon.getCustomerAccountDirectory().authenticateCustomer(userName, password);
                                    check++;
                                    break;
                                }

                            }

                            
                        }

                        if(check!=0)
                        break;

                        
                    }

                    if(check!=0)
                    break;

                    
                }

                if(check!=0)
                break;

                
            }

     


        if (customerAccount==null) {
            JOptionPane.showMessageDialog(null, "Invalid Credentials!");
        } else {

            
            
            AmazonFinanceOrganization amazonFinanceOrganization=null;
            AmazonSalesOrganization amazonSalesOrganization=null;
            for(Organization o : amazon.getOrganizationDirectory().getOrganizationList()){
              if(o instanceof AmazonFinanceOrganization){
                  amazonFinanceOrganization = (AmazonFinanceOrganization)o;
              } else if(o instanceof AmazonSalesOrganization){
                  amazonSalesOrganization = (AmazonSalesOrganization)o;
              }  
            }      
            
            
            
     ArrayList<Integer> numbers = new ArrayList<>();
     for(int t = 1; t < 99999; t++)
     {
     numbers.add(t);
   }
 
     Collections.shuffle(numbers);
     
      int n0 = (int)(Math.random() * (99999 - 1)) + 1;
      int n1 = (int)(Math.random() * (99999 - 1)) + 1;
      
     int id = (int) Math.pow(10, Math.floor(Math.log10(numbers.get(n1)))+1)*numbers.get(n0) + numbers.get(n1);       
   
if (id < 0) {
    id *= -1;
}   
            
            
            order.setCustomerAccount(customerAccount);
            order.setOrderId(id);
      //      amazonSalesOrganization.getMasterOrderCatalog().addOrder(order);

            
            
            

      n0 = (int)(Math.random() * (99999 - 1)) + 1;
      n1 = (int)(Math.random() * (99999 - 1)) + 1;
      
      id = (int) Math.pow(10, Math.floor(Math.log10(numbers.get(n1)))+1)*numbers.get(n0) + numbers.get(n1);       
    
    if (id < 0) {
    id *= -1;
}        
            
            Invoice invoice = new Invoice();
            invoice.setOrder(order);
            invoice.setOrderItem(null);
            invoice.setInvoiceID(String.valueOf(id));
            invoice.setStatus("unpaid");
            invoice.setAmount(order.getOrderTotal());
            amazonFinanceOrganization.getInvoiceDirectory().getInvoiceDirectory().add(invoice);
            
            
            
            Payment payment = new Payment();
            payment.setInvoice(invoice);
            payment.setPaymentType(null);
            payment.setInvoiceFor(Payment.InAmazonFromCustomer);
            amazonFinanceOrganization.getPaymentDirectory().getPaymentDirectory().add(payment);
  
                 ArrayList<Integer> numbers1 = new ArrayList<>();
     for(int t = 1; t < 999; t++)
     {
     numbers.add(t);
   }
 
     Collections.shuffle(numbers);
     
      int n01 = (int)(Math.random() * (999 - 1)) + 1;
      int n11 = (int)(Math.random() * (999 - 1)) + 1;
      
     int confirmationNumber = (int) Math.pow(10, Math.floor(Math.log10(numbers.get(n11)))+1)*numbers.get(n01) + numbers.get(n11);       
       
    if(confirmationNumber<0){
        confirmationNumber *= -1;
    } 
     
     payment.setConfirmationNumber(confirmationNumber);
   
            
            

                PlaceOrderJPanel pojp = new PlaceOrderJPanel(userProcessContainer,system,customerAccount,db4OUtil,amazon,payment,this.mainAddress,order);
                userProcessContainer.add("PlaceOrderJPanel", pojp);
                CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
                cardLayout.next(userProcessContainer);
                
                
        }

        
        }   
       else{
           
           JOptionPane.showMessageDialog(null, "Please fill all the fields");
           
       }
        
        
    }//GEN-LAST:event_loginJButtonActionPerformed

    private void countryJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countryJComboBoxActionPerformed
        CountryNetwork country = (CountryNetwork) countryJComboBox.getSelectedItem();
        if (country != null) {
            populateStateJComboBox(country);
        }
    }//GEN-LAST:event_countryJComboBoxActionPerformed

    private void stateJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stateJComboBoxActionPerformed

        StateNetwork state = (StateNetwork) stateJComboBox.getSelectedItem();
        if (state != null) {
            populateRegionJComboBox(state);
        }

    }//GEN-LAST:event_stateJComboBoxActionPerformed

    private void signUpJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signUpJButtonActionPerformed

int count = 0;
       if( nameJTextField.getText().isEmpty() || phoneNoJTextField.getText().isEmpty() || emailIdJTextField.getText().isEmpty() || passwordJTextField.getText().isEmpty() || usernameJTextField1.getText().isEmpty() ){ 
     count++;
       }
        
       if(count==0){
                            // Get user name
        String userName = usernameJTextField.getText();
        // Get Password
        String password = String.valueOf(passwordJTextField.getText());

        //Step1: Check in the EcoSystem
        UserAccount userAccount = system.getUserAccountDirectory().authenticateUser(userName, password);
        //Step2: If user account is not in the system's user account directory
        
        Enterprise inEnterprise = null;
        Organization inOrganization = null;
    
        
        
        String countryName = null;
        if (userAccount == null) {
//            1
            
            
            
            
            
            for (CountryNetwork countryNetwork : system.getCountryNetworkList()) {
//              2  
            countryName = countryNetwork.getCountryName();
                
                for (StateNetwork stateNetwork : countryNetwork.getStateNetworkList()) {
//              3  
        
                
                for (RegionNetwork regionNetwork : stateNetwork.getRegionNetworkList()) {
//              4  
                    
                    
                    
                for (Enterprise enterprise : regionNetwork.getEnterpriseDirectory().getEnterpriseList()) {
//               5     
                    
                 
                    
                    if (enterprise.getUserAccountDirectory().authenticateUser(userName, password) != null) {
                    userAccount = enterprise.getUserAccountDirectory().authenticateUser(userName, password);
                        inEnterprise = enterprise;
                        
                    }else{
                        
                        
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                           
                            userAccount = organization.getUserAccountDirectory().authenticateUser(userName, password);
                                if(userAccount!=null){
                                    inEnterprise = enterprise;
                                    inOrganization = organization;
                                   break;
                                    
                                    }
                            
                            }
                   
                        
                    } 
                    
               if (inEnterprise != null) {
                        break;
                    }
                   
               
                
                
         //       5  
                }
                
                if (inEnterprise != null) {
                        break;
                    }
                
                
           
                
        //           4     
                    }
        
                  
                
     //           3     
                }
                
                     
                
//           2     
            }
            
                   
        
 //    1       
        }
        

       
        
        
        
        
        
        CustomerAccount customerAccount=null;
       Amazon amazon = null; 
      if (userAccount == null && customerAccount==null) {
//            1
            
            
            
            for (CountryNetwork countryNetwork : system.getCountryNetworkList()) {
//              2  
            countryName = countryNetwork.getCountryName();
                
                for (StateNetwork stateNetwork : countryNetwork.getStateNetworkList()) {
//              3  
        
                
                for (RegionNetwork regionNetwork : stateNetwork.getRegionNetworkList()) {
//              4  
                    
                    
                    
                for (Enterprise enterprise : regionNetwork.getEnterpriseDirectory().getEnterpriseList()) {
//               5     
      
                    
                    
                 
          if(enterprise instanceof Amazon){
           amazon = (Amazon)enterprise;
              
           inEnterprise = amazon;
           

           if(amazon.getCustomerAccountDirectory().authenticateCustomer(userName, password)!=null){
               
           customerAccount = amazon.getCustomerAccountDirectory().authenticateCustomer(userName, password);
           
           break;
             }      
          
           
        }          
                    
               
                   
               
                
                
         //       5  
                }
                
                if(inEnterprise!=null)
                    break;
                 
           
                
        //           4     
                    }
        
                if(inEnterprise!=null)
                    break;
                 
                
     //           3     
                }
                
                if(inEnterprise!=null)
                    break;
                 
                
//           2     
            }
            
            
        
 //    1       
        }
          
//.............................................................................................
      
   
      
      
      
      
      
      
      
      
ArrayList<CountryNetwork> countryNetworkList = system.getCountryNetworkList();
        Amazon amazonEnterprise = null; 
        
        for(int i=0;i<countryNetworkList.size();i++){
        
       try {
        if(countryNetworkList.get(i).getCountryName().equals(countryName))    
        {
        ArrayList<StateNetwork> stateNetworkList = countryNetworkList.get(i).getStateNetworkList();
        
        
        for(int j=0;j<stateNetworkList.size();j++){
        
       
        ArrayList<RegionNetwork> regionNetworkList = stateNetworkList.get(j).getRegionNetworkList();
        
        
        
        
        for(int k=0;k<regionNetworkList.size();k++){
        
        
        
      ArrayList<Enterprise> enterpriseList = regionNetworkList.get(k).getEnterpriseDirectory().getEnterpriseList();  
        
       
      for(int l=0;l<enterpriseList.size();l++){
        
          if(enterpriseList.get(l) instanceof Amazon){
             amazonEnterprise = (Amazon)enterpriseList.get(l);
             
          
        }
        
      

      
   
        
        }
        
        }
        
        

        
        
        
        
        
        }
        

        
        }
        
       } catch (NullPointerException e){}
        
        }
              
      
      
      
      
      
      
      
      
      
        

           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
      if (userAccount == null && customerAccount==null) {        
        
        amazon=null;
         countryNetworkList = system.getCountryNetworkList();

        
        for(int i=0;i<countryNetworkList.size();i++){
        
    
        if(countryNetworkList.get(i).getCountryName().equals(countryJComboBox.getSelectedItem().toString()))    
        {
        ArrayList<StateNetwork> stateNetworkList = countryNetworkList.get(i).getStateNetworkList();

        
        for(int j=0;j<stateNetworkList.size();j++){
        
       
        ArrayList<RegionNetwork> regionNetworkList = stateNetworkList.get(j).getRegionNetworkList();

        
        
        
        for(int k=0;k<regionNetworkList.size();k++){
        
        
        
      ArrayList<Enterprise> enterpriseList = regionNetworkList.get(k).getEnterpriseDirectory().getEnterpriseList();  

       
      for(int l=0;l<enterpriseList.size();l++){
          
          if(enterpriseList.get(l) instanceof Amazon){
           amazon = (Amazon)enterpriseList.get(l);
              
           
        }
          
          
          
        
      
   
        
        }
        
        }
        
        

        
        
        
        
        
        }
        

        
        }
        
        
        
        }
    
        System.out.println(amazon);
        
      Customer customer = amazon.getCustomerDirectory().createCustomer(nameJTextField.getText(), phoneNoJTextField.getText(), emailIdJTextField.getText(), countryJComboBox.getSelectedItem().toString(), stateJComboBox.getSelectedItem().toString(), regionJComboBox.getSelectedItem().toString());

      customerAccount = amazon.getCustomerAccountDirectory().createCustomerAccount(usernameJTextField1.getText(), passwordJTextField.getText(), customer);

       db4OUtil.storeSystem(system);
       
        if (customerAccount==null) {
            JOptionPane.showMessageDialog(null, "Invalid Credentials!");
        } else {
            
            
            
            
            AmazonFinanceOrganization amazonFinanceOrganization=null;
            AmazonSalesOrganization amazonSalesOrganization=null;
            for(Organization o : amazon.getOrganizationDirectory().getOrganizationList()){
              if(o instanceof AmazonFinanceOrganization){
                  amazonFinanceOrganization = (AmazonFinanceOrganization)o;
              } else if(o instanceof AmazonSalesOrganization){
                  amazonSalesOrganization = (AmazonSalesOrganization)o;
              }  
            }      
            
            
            
     ArrayList<Integer> numbers = new ArrayList<>();
     for(int t = 1; t < 99999; t++)
     {
     numbers.add(t);
   }
 
     Collections.shuffle(numbers);
     
      int n0 = (int)(Math.random() * (99999 - 1)) + 1;
      int n1 = (int)(Math.random() * (99999 - 1)) + 1;
      
     int id = (int) Math.pow(10, Math.floor(Math.log10(numbers.get(n1)))+1)*numbers.get(n0) + numbers.get(n1);       
   
            
 if (id < 0) {
    id *= -1;
}           
            
            order.setCustomerAccount(customerAccount);
            order.setOrderId(id);
      //      amazonSalesOrganization.getMasterOrderCatalog().addOrder(order);

            
            
            

      n0 = (int)(Math.random() * (99999 - 1)) + 1;
      n1 = (int)(Math.random() * (99999 - 1)) + 1;
      
      id = (int) Math.pow(10, Math.floor(Math.log10(numbers.get(n1)))+1)*numbers.get(n0) + numbers.get(n1);       
    
   if (id < 0) {
    id *= -1;
}         
            
            Invoice invoice = new Invoice();
            invoice.setOrder(order);
            invoice.setOrderItem(null);
            invoice.setInvoiceID(String.valueOf(id));
            invoice.setStatus("unpaid");
            invoice.setAmount(order.getOrderTotal());
            amazonFinanceOrganization.getInvoiceDirectory().getInvoiceDirectory().add(invoice);
            
            
            
            Payment payment = new Payment();
            payment.setInvoice(invoice);
            payment.setPaymentType(null);
            payment.setInvoiceFor(Payment.InAmazonFromCustomer);
            amazonFinanceOrganization.getPaymentDirectory().getPaymentDirectory().add(payment);
  
                 ArrayList<Integer> numbers1 = new ArrayList<>();
     for(int t = 1; t < 999; t++)
     {
     numbers.add(t);
   }
 
     Collections.shuffle(numbers);
     
      int n01 = (int)(Math.random() * (999 - 1)) + 1;
      int n11 = (int)(Math.random() * (999 - 1)) + 1;
      
     int confirmationNumber = (int) Math.pow(10, Math.floor(Math.log10(numbers.get(n11)))+1)*numbers.get(n01) + numbers.get(n11);       
       
     payment.setConfirmationNumber(confirmationNumber);
   
            
            

                PlaceOrderJPanel pojp = new PlaceOrderJPanel(userProcessContainer,system,customerAccount,db4OUtil,amazon,payment,this.mainAddress,order);
                userProcessContainer.add("PlaceOrderJPanel", pojp);
                CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
                cardLayout.next(userProcessContainer);
            
        }

        
        }
      
      else{
          
          
          JOptionPane.showMessageDialog(null, "Please use Different Username. Username already used.");
          
          
      }
      
      
      
      
           
       }
       else{
       
           JOptionPane.showMessageDialog(null, "Please fill all the fields");
           
       }
        
    }//GEN-LAST:event_signUpJButtonActionPerformed

    private void nameJTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameJTextFieldKeyTyped
        
        char c =evt.getKeyChar();
       if(!(Character.isAlphabetic(c) || (c== KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)) ){
           evt.consume();
       }
        
    }//GEN-LAST:event_nameJTextFieldKeyTyped

    private void phoneNoJTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phoneNoJTextFieldKeyTyped
        
        char c =evt.getKeyChar();
       if(!(Character.isDigit(c) || (c== KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)) ){
           evt.consume();
       }  
        
    }//GEN-LAST:event_phoneNoJTextFieldKeyTyped

    private void emailIdJTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emailIdJTextFieldKeyTyped
        
        char c =evt.getKeyChar();
       if(((c==KeyEvent.VK_SPACE) ) ){
           evt.consume();
       }
       
        
    }//GEN-LAST:event_emailIdJTextFieldKeyTyped

    private void usernameJTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usernameJTextField1KeyTyped
        
        char c =evt.getKeyChar();
       if(((c==KeyEvent.VK_SPACE) ) ){
           evt.consume();
       }
        
    }//GEN-LAST:event_usernameJTextField1KeyTyped

    private void passwordJTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordJTextFieldKeyTyped
        
        char c =evt.getKeyChar();
       if(((c==KeyEvent.VK_SPACE) ) ){
           evt.consume();
       }
        
    }//GEN-LAST:event_passwordJTextFieldKeyTyped

    private void usernameJTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usernameJTextFieldKeyTyped
       
        char c =evt.getKeyChar();
       if(((c==KeyEvent.VK_SPACE) ) ){
           evt.consume();
       }
        
    }//GEN-LAST:event_usernameJTextFieldKeyTyped

    private void passwordJPasswordFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordJPasswordFieldKeyTyped
        
        char c =evt.getKeyChar();
       if(((c==KeyEvent.VK_SPACE) ) ){
           evt.consume();
       }
        
    }//GEN-LAST:event_passwordJPasswordFieldKeyTyped

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox countryJComboBox;
    private javax.swing.JTextField emailIdJTextField;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton loginJButton;
    private javax.swing.JTextField nameJTextField;
    private javax.swing.JLabel passwordJLabel;
    private javax.swing.JPasswordField passwordJPasswordField;
    private javax.swing.JTextField passwordJTextField;
    private javax.swing.JTextField phoneNoJTextField;
    private javax.swing.JComboBox regionJComboBox;
    private javax.swing.JButton signUpJButton;
    private javax.swing.JComboBox stateJComboBox;
    private javax.swing.JLabel usernameJLabel;
    private javax.swing.JTextField usernameJTextField;
    private javax.swing.JTextField usernameJTextField1;
    // End of variables declaration//GEN-END:variables
}
