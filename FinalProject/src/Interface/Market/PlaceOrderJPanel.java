/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.Market;

import Business.Customer.CustomerAccount;
import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Enterprise.Amazon;
import Business.Enterprise.Enterprise;
import Business.Enterprise.Supplier;
import Business.Network.CountryNetwork;
import Business.Network.RegionNetwork;
import Business.Network.StateNetwork;
import Business.Organization.Amazon.Admin.AmazonAdminOrganization;
import Business.Organization.Amazon.Admin.WorkRequest;
import Business.Organization.Amazon.Finance.AmazonFinanceOrganization;
import Business.Organization.Amazon.Finance.Invoice;
import Business.Organization.Amazon.Finance.Payment;
import Business.Organization.Amazon.Inventory.AmazonInventoryOrganization;
import Business.Organization.Amazon.Sales.AmazonSalesOrganization;
import Business.Organization.Amazon.Sales.Order;
import Business.Organization.Amazon.Sales.OrderItem;
import Business.Organization.Organization;
import Business.Organization.Supplier.Inventory.Product;
import Business.Organization.Supplier.Inventory.SupplierInventoryOrganization;
import Interface.Supplier.Inventory.ManageProductCatalogJPanel;
import java.awt.CardLayout;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Manish Gajare
 */
public class PlaceOrderJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PlaceOrderJPanel
     */
    JPanel userProcessContainer; 
    EcoSystem system; 
    CustomerAccount customerAccount; 
    DB4OUtil db4OUtil; 
    Amazon amazon;
    Payment payment;
    String mainAddress;
    Order order;
    
    public PlaceOrderJPanel(JPanel userProcessContainer, EcoSystem system, CustomerAccount customerAccount, DB4OUtil db4OUtil, Amazon amazon,Payment payment,String mainAddress,Order order) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.customerAccount = customerAccount;
        this.db4OUtil = db4OUtil;
        this.amazon = amazon;
        this.payment = payment;
        this.mainAddress = mainAddress;
        this.order = order;
        
        confirmationNumberJLabel.setVisible(false);
        confirmationNumberValueJLabel.setVisible(false);
        
        
        populateCartJTable();
        
        
        
        totalAmountJLabel.setText(String.valueOf(payment.getInvoice().getOrder().getOrderTotal()));
        
        paymentModeJComboBox.addItem("Credit");
        paymentModeJComboBox.addItem("Debit");
        
        mainPageJButton.setVisible(false);
        
    }
    
    public void populateCartJTable(){
        
          DefaultTableModel tableModel = (DefaultTableModel)cartJTable.getModel();
           
           
        for(OrderItem oi:payment.getInvoice().getOrder().getOrderItemList()){
              
                Object[] object = new Object[5];
                
                object[0] = oi.getProduct().getProductId();
                object[1] = oi.getProduct().getName();
                object[2] = oi.getQuantity();
                object[3] = oi.getPrice();
                object[4] = oi.getSupplier();
                        
                tableModel.addRow(object);
        
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        cartJTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        totalAmountJLabel = new javax.swing.JLabel();
        paymentModeJComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        placeOrderJButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        streetAddressJTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        contactNumberJTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        nameJTextField = new javax.swing.JTextField();
        messageJLabel = new javax.swing.JLabel();
        mainPageJButton = new javax.swing.JButton();
        confirmationNumberJLabel = new javax.swing.JLabel();
        confirmationNumberValueJLabel = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Place Order");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 30, -1, -1));

        cartJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Name", "Quantity", "Price", "Supplier"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        cartJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cartJTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(cartJTable);

        add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 80, 760, 140));

        jLabel2.setText("Total Amount :");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 250, -1, 20));

        totalAmountJLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        totalAmountJLabel.setText("0");
        add(totalAmountJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 250, 100, 20));

        add(paymentModeJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 370, 150, 20));

        jLabel3.setText("Mode of Payment:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 370, -1, 20));

        placeOrderJButton.setText("Place Order");
        placeOrderJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                placeOrderJButtonActionPerformed(evt);
            }
        });
        add(placeOrderJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 410, -1, -1));

        jLabel4.setText("Street Address:");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 310, -1, 20));

        streetAddressJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                streetAddressJTextFieldKeyTyped(evt);
            }
        });
        add(streetAddressJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 310, 150, -1));

        jLabel5.setText("Contact Number:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 340, -1, -1));

        contactNumberJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contactNumberJTextFieldActionPerformed(evt);
            }
        });
        contactNumberJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                contactNumberJTextFieldKeyTyped(evt);
            }
        });
        add(contactNumberJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 340, 150, -1));

        jLabel6.setText("Name:");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 280, -1, -1));

        nameJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nameJTextFieldKeyTyped(evt);
            }
        });
        add(nameJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 280, 150, -1));
        add(messageJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 440, 510, 30));

        mainPageJButton.setText("Main Page");
        mainPageJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainPageJButtonActionPerformed(evt);
            }
        });
        add(mainPageJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 520, -1, -1));

        confirmationNumberJLabel.setText("Confirmation Number:");
        add(confirmationNumberJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 490, -1, -1));
        add(confirmationNumberValueJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 480, 180, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void cartJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cartJTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_cartJTableMouseClicked

    private void placeOrderJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_placeOrderJButtonActionPerformed
        
        
     int count1 = 0;
       if( nameJTextField.getText().isEmpty() || streetAddressJTextField.getText().isEmpty() || contactNumberJTextField.getText().isEmpty() ){ 
     count1++;
       }
        
       if(count1==0){   
        
      payment.getInvoice().setStatus("paid");
      payment.setPaymentType(paymentModeJComboBox.getSelectedItem().toString());
      payment.getInvoice().setShippingAddress(nameJTextField.getText()+", "+streetAddressJTextField.getText()+", "+this.mainAddress+". Ph No.: "+contactNumberJTextField.getText()+".");
      
      
            AmazonFinanceOrganization amazonFinanceOrganization=null;
            AmazonSalesOrganization amazonSalesOrganization=null;
            AmazonInventoryOrganization amazonInventoryOrganization=null;
            AmazonAdminOrganization amazonAdminOrganization=null;
            for(Organization o : amazon.getOrganizationDirectory().getOrganizationList()){
              if(o instanceof AmazonFinanceOrganization){
                  amazonFinanceOrganization = (AmazonFinanceOrganization)o;
              } else if(o instanceof AmazonSalesOrganization){
                  amazonSalesOrganization = (AmazonSalesOrganization)o;
              }  else if(o instanceof AmazonInventoryOrganization){
                  amazonInventoryOrganization = (AmazonInventoryOrganization)o;
              }  else if(o instanceof AmazonAdminOrganization){
                  amazonAdminOrganization = (AmazonAdminOrganization)o;
              }  
            } 
      
    
      amazonSalesOrganization.getMasterOrderCatalog().addOrder(order);
            
            
            
            
           for(CountryNetwork country:system.getCountryNetworkList()){
               for(StateNetwork state:country.getStateNetworkList()){
                   for(RegionNetwork region:state.getRegionNetworkList()){
                       for(Enterprise e: region.getEnterpriseDirectory().getEnterpriseList()){
                           if(e instanceof Supplier){
                               Supplier supplier = (Supplier)e;
                               ArrayList<OrderItem> orderItemList = new ArrayList<>();
                               int count=0;
                              for(Organization o: supplier.getOrganizationDirectory().getOrganizationList()){
                                  if(o instanceof SupplierInventoryOrganization){
                                   SupplierInventoryOrganization sio = (SupplierInventoryOrganization)o;
                                      for(Product product : sio.getProductCatalog().getProductList()){
                                        for(OrderItem orderItem:payment.getInvoice().getOrder().getOrderItemList()){
                                           if(orderItem.getProduct().equals(product)){
                                               count++;
                                               orderItemList.add(orderItem);
                                               product.setAvailability(product.getAvailability()-orderItem.getQuantity());
                                               
                                               
                                           }
                                      }
                                  }
                              } 
                          }
                              
                              if(count!=0){
                                  
                                  
                                  
   ArrayList<Integer> numbers = new ArrayList<>();
     for(int t = 1; t < 99999; t++)
     {
     numbers.add(t);
   }
 
     Collections.shuffle(numbers);
     
      int n0 = (int)(Math.random() * (99999 - 1)) + 1;
      int n1 = (int)(Math.random() * (99999 - 1)) + 1;
      
     int id = (int) Math.pow(10, Math.floor(Math.log10(numbers.get(n1)))+1)*numbers.get(n0) + numbers.get(n1);       
   
if (id < 0) {
  id *= -1;
}
     
            Invoice invoice = new Invoice();
            invoice.setOrder(payment.getInvoice().getOrder());
            invoice.setOrderItem(orderItemList);
            invoice.setInvoiceID(String.valueOf(id));
            invoice.setStatus("unpaid");
            invoice.setShippingAddress("Name: "+nameJTextField.getText()+" - Address: "+streetAddressJTextField.getText()+", "+this.mainAddress+" - Phone Number: "+contactNumberJTextField.getText());
            
            double amount = 0;
            for(int i=0;i<orderItemList.size();i++){
                amount = amount + orderItemList.get(i).getOrderItemTotal()-orderItemList.get(i).getCommision();
            }
            invoice.setAmount(amount);
            
            amazonFinanceOrganization.getInvoiceDirectory().getInvoiceDirectory().add(invoice);
            
                                  
            Payment payment = new Payment();
            payment.setInvoice(invoice);
            payment.setPaymentType("-");
            payment.setInvoiceFor(Payment.InSupplierFromAmazon);
            payment.setConfirmationNumber(this.payment.getConfirmationNumber());
            
            amazonFinanceOrganization.getPaymentDirectory().getPaymentDirectory().add(payment);
                                  
            WorkRequest workRequest = new WorkRequest();
            workRequest.setPayment(payment);
            workRequest.setEndingTime(null);
            workRequest.setFinance(null);
            workRequest.setPackagingProcess(null);
            workRequest.setPackaged(null);
            workRequest.setShippingProcess(null);
            workRequest.setShipped(null);
            workRequest.setCustomerAccount(customerAccount);
            workRequest.setStatus(WorkRequest.ORDER_PLACED);
            workRequest.setCustomerServiceEmployee(null);
            workRequest.setCustomerServiceRequest(null);
            workRequest.setPenalized(null);
            
            
             Calendar cal = Calendar.getInstance();
           
              workRequest.setBeginningTime(cal);
            
Calendar cal1 = Calendar.getInstance();            
cal1.set(Calendar.HOUR_OF_DAY, 18);           
cal1.set(Calendar.MINUTE, 0);                 
cal1.set(Calendar.SECOND, 0);                 
cal1.set(Calendar.MILLISECOND, 0);            


            if(cal.before(cal1)){

                
Calendar cal2 = Calendar.getInstance();          
cal2.set(Calendar.HOUR_OF_DAY, 23);            
cal2.set(Calendar.MINUTE, 59);                 
cal2.set(Calendar.SECOND, 59);                 
cal2.set(Calendar.MILLISECOND, 59);            
workRequest.setToBeDeliveredBy(cal2);               
                
            }else{

                
Calendar cal2 = Calendar.getInstance();
cal2.add (Calendar.DAY_OF_YEAR, 1); 
cal2.set(Calendar.HOUR_OF_DAY, 23);            
cal2.set(Calendar.MINUTE, 59);                 
cal2.set(Calendar.SECOND, 59);                 
cal2.set(Calendar.MILLISECOND, 59);            
workRequest.setToBeDeliveredBy(cal2);             
                
            }
            
     
workRequest.setBeginningTime(cal);
workRequest.setEndingTime(null);
            
            
Calendar cal3 = Calendar.getInstance();
cal3.add (Calendar.DAY_OF_YEAR, 30); 
cal3.set(Calendar.HOUR_OF_DAY, 23);            
cal3.set(Calendar.MINUTE, 59);                 
cal3.set(Calendar.SECOND, 59);                 
cal3.set(Calendar.MILLISECOND, 59);    

workRequest.setCanBereturnedTill(cal3);

workRequest.setOrderItemQuantityToReturn(0);
workRequest.setOrderItemToReturn(null);

            amazonAdminOrganization.getWorkQueue().getWorkQueue().add(workRequest);
            
            
            
            
            
                           }
                       }
                   }
               }
           } 
       }    
            
            
db4OUtil.storeSystem(system);


nameJTextField.setEnabled(false);
streetAddressJTextField.setEnabled(false);
contactNumberJTextField.setEnabled(false);
paymentModeJComboBox.setEnabled(false);
placeOrderJButton.setEnabled(false);

messageJLabel.setText("Your Order was placed Successfully. Please Login to Review Your Order Status");

mainPageJButton.setVisible(true);
             
confirmationNumberJLabel.setVisible(true);
confirmationNumberValueJLabel.setVisible(true);

confirmationNumberValueJLabel.setText(String.valueOf(this.payment.getConfirmationNumber()));


        }
       else{
       
           JOptionPane.showMessageDialog(null, "Please fill all the fields");
           
       }
       
    }//GEN-LAST:event_placeOrderJButtonActionPerformed

    private void contactNumberJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contactNumberJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_contactNumberJTextFieldActionPerformed

    private void mainPageJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainPageJButtonActionPerformed

        BrowseJPanel bjp = new BrowseJPanel(userProcessContainer,system,db4OUtil);
        userProcessContainer.add("BrowseJPanel", bjp);
        CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
        cardLayout.next(userProcessContainer); 
        
    }//GEN-LAST:event_mainPageJButtonActionPerformed

    private void nameJTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameJTextFieldKeyTyped
        
        char c =evt.getKeyChar();
       if(!(Character.isLetter(c) || (c== KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE) || (c==KeyEvent.VK_SPACE) ) ){
           evt.consume();
       }   
        
    }//GEN-LAST:event_nameJTextFieldKeyTyped

    private void streetAddressJTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_streetAddressJTextFieldKeyTyped
        
       char c =evt.getKeyChar();
       if(!(Character.isLetterOrDigit(c) || (c== KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE) || (c==KeyEvent.VK_SPACE) ) ){
           evt.consume();
       }
       
        
    }//GEN-LAST:event_streetAddressJTextFieldKeyTyped

    private void contactNumberJTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_contactNumberJTextFieldKeyTyped
        
        char c =evt.getKeyChar();
       if(!(Character.isDigit(c) || (c== KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)) ){
           evt.consume();
       }   
        
    }//GEN-LAST:event_contactNumberJTextFieldKeyTyped

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable cartJTable;
    private javax.swing.JLabel confirmationNumberJLabel;
    private javax.swing.JLabel confirmationNumberValueJLabel;
    private javax.swing.JTextField contactNumberJTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton mainPageJButton;
    private javax.swing.JLabel messageJLabel;
    private javax.swing.JTextField nameJTextField;
    private javax.swing.JComboBox paymentModeJComboBox;
    private javax.swing.JButton placeOrderJButton;
    private javax.swing.JTextField streetAddressJTextField;
    private javax.swing.JLabel totalAmountJLabel;
    // End of variables declaration//GEN-END:variables
}
